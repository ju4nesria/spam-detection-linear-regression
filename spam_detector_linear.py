"""
üéØ SISTEMA DE DETECCI√ìN DE SPAM CON REGRESI√ìN LINEAL
===================================================

Sistema completo para detectar spam usando regresi√≥n lineal.
Dise√±ado para principiantes de Machine Learning.

¬øQU√â HACE ESTE SISTEMA?
- Entrena un modelo de regresi√≥n lineal con correos etiquetados
- Detecta si un correo es SPAM (no deseado) o HAM (normal)
- Explica por qu√© clasific√≥ cada correo
- Permite probar correos personalizados

CONCEPTOS CLAVE:
1. Regresi√≥n Lineal: Algoritmo que encuentra la mejor l√≠nea para separar clases
2. Features: Palabras del correo convertidas en n√∫meros
3. Target: 0 = HAM, 1 = SPAM
4. Vectorizaci√≥n: Proceso de convertir texto en n√∫meros

INSTRUCCIONES:
1. Ejecutar: python spam_detector_linear.py
2. El sistema entrenar√° el modelo y te permitir√° probar correos
"""

# =============================================================================
# IMPORTACIONES NECESARIAS
# =============================================================================

import pandas as pd          # Para manejar datos tabulares
import numpy as np           # Para operaciones matem√°ticas
import pickle               # Para guardar/cargar modelos
import re                   # Para expresiones regulares (limpieza de texto)
from sklearn.model_selection import train_test_split      # Dividir datos
from sklearn.feature_extraction.text import CountVectorizer  # Convertir texto a n√∫meros
from sklearn.linear_model import LinearRegression         # Nuestro algoritmo
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score  # M√©tricas
import warnings
warnings.filterwarnings('ignore')  # Ocultar advertencias

# =============================================================================
# CLASE PRINCIPAL: SpamDetectorLinear
# =============================================================================

class SpamDetectorLinear:
    """
    Sistema de detecci√≥n de spam usando regresi√≥n lineal.
    
    Esta clase contiene todo lo necesario para:
    1. Preprocesar texto de correos
    2. Convertir texto en caracter√≠sticas num√©ricas
    3. Entrenar un modelo de regresi√≥n lineal
    4. Predecir si un correo es spam o ham
    5. Explicar las predicciones
    """
    
    def __init__(self):
        """
        Inicializa el detector de spam.
        
        Atributos:
        - vectorizer: Convierte texto en n√∫meros (CountVectorizer)
        - model: Nuestro modelo de regresi√≥n lineal
        - feature_names: Nombres de las caracter√≠sticas (palabras)
        """
        self.vectorizer = None      # Se inicializa en create_features()
        self.model = None           # Se inicializa en train_model()
        self.feature_names = []     # Lista de palabras √∫nicas
        
    def preprocess_text(self, text):
        """
        Limpia el texto para el an√°lisis de machine learning.
        
        Pasos de limpieza:
        1. Convertir a min√∫sculas (normalizaci√≥n)
        2. Eliminar puntuaci√≥n (no aporta informaci√≥n)
        3. Eliminar n√∫meros (no son relevantes para spam)
        4. Limpiar espacios extra
        
        Args:
            text (str): Texto del correo a limpiar
            
        Returns:
            str: Texto limpio y normalizado
        """
        # Convertir todo a min√∫sculas para normalizaci√≥n
        text = text.lower()
        
        # Eliminar puntuaci√≥n usando expresiones regulares
        # [^\w\s] significa: cualquier car√°cter que NO sea palabra o espacio
        text = re.sub(r'[^\w\s]', '', text)
        
        # Eliminar n√∫meros (no son relevantes para detectar spam)
        text = re.sub(r'\d+', '', text)
        
        # Eliminar espacios extra y normalizar
        text = ' '.join(text.split())
        
        return text
    
    def create_features(self, texts):
        """
        Convierte texto en caracter√≠sticas num√©ricas que el modelo puede entender.
        
        Usa CountVectorizer que:
        - Cuenta cu√°ntas veces aparece cada palabra
        - Crea una matriz donde cada fila es un correo
        - Cada columna es una palabra diferente
        - max_features=1000: m√°ximo 1000 palabras diferentes
        - stop_words='english': elimina palabras comunes (the, and, or, etc.)
        - ngram_range=(1, 2): palabras individuales y pares de palabras
        
        Args:
            texts (list): Lista de textos de correos
            
        Returns:
            scipy.sparse.csr_matrix: Matriz de caracter√≠sticas
        """
        print("üîß Creando caracter√≠sticas del texto...")
        
        # Crear vectorizador (convierte texto en n√∫meros)
        self.vectorizer = CountVectorizer(
            max_features=1000,      # M√°ximo 1000 palabras diferentes
            stop_words='english',   # Eliminar palabras comunes (the, and, or, etc.)
            ngram_range=(1, 2)      # Palabras individuales y pares de palabras
        )
        
        # Aplicar vectorizaci√≥n: convertir texto en matriz num√©rica
        features = self.vectorizer.fit_transform(texts)
        
        # Obtener nombres de caracter√≠sticas (palabras)
        self.feature_names = self.vectorizer.get_feature_names_out()
        
        print(f"‚úÖ Caracter√≠sticas creadas: {features.shape[1]} palabras √∫nicas")
        print(f"üìß Correos procesados: {features.shape[0]}")
        
        return features
    
    def load_and_prepare_data(self, file_path):
        """
        Carga el dataset y prepara los datos para el entrenamiento.
        
        Pasos:
        1. Cargar datos desde CSV
        2. Preprocesar todos los textos
        3. Crear caracter√≠sticas num√©ricas
        4. Preparar etiquetas (target)
        
        Args:
            file_path (str): Ruta al archivo CSV con los datos
            
        Returns:
            tuple: (X, y) donde X son las caracter√≠sticas e y son las etiquetas
        """
        print("üìÇ Cargando dataset...")
        
        # Cargar datos desde archivo CSV
        df = pd.read_csv(file_path)
        
        # Preprocesar todos los textos
        print("üßπ Preprocesando textos...")
        df['clean_text'] = df['email_text'].apply(self.preprocess_text)
        
        # Crear caracter√≠sticas num√©ricas
        X = self.create_features(df['clean_text'])
        
        # Preparar etiquetas (target): 0 = HAM, 1 = SPAM
        y = (df['label'] == 'spam').astype(int)
        
        # Mostrar resumen de los datos
        print(f"\nüìä RESUMEN DE DATOS:")
        print(f"   Total de correos: {len(df)}")
        print(f"   Correos HAM: {sum(y == 0)}")
        print(f"   Correos SPAM: {sum(y == 1)}")
        print(f"   Porcentaje SPAM: {sum(y == 1)/len(y)*100:.1f}%")
        
        return X, y
    
    def train_model(self, X_train, X_test, y_train, y_test):
        """
        Entrena el modelo de regresi√≥n lineal.
        
        ¬øC√ìMO FUNCIONA LA REGRESI√ìN LINEAL?
        - Busca la mejor l√≠nea que separa SPAM de HAM
        - Cada palabra tiene un "peso" (coeficiente)
        - Palabras con peso positivo indican SPAM
        - Palabras con peso negativo indican HAM
        
        Args:
            X_train, X_test: Caracter√≠sticas de entrenamiento y prueba
            y_train, y_test: Etiquetas de entrenamiento y prueba
            
        Returns:
            dict: Diccionario con m√©tricas de evaluaci√≥n
        """
        print("\nüéØ ENTRENANDO MODELO DE REGRESI√ìN LINEAL")
        print("=" * 50)
        
        # Crear y entrenar modelo de regresi√≥n lineal
        self.model = LinearRegression()
        print("üîÑ Entrenando modelo...")
        self.model.fit(X_train, y_train)
        
        # Evaluar el modelo
        print("\nüìà EVALUANDO MODELO")
        print("-" * 30)
        
        # Hacer predicciones
        y_pred_train = self.model.predict(X_train)
        y_pred_test = self.model.predict(X_test)
        
        # Calcular m√©tricas de regresi√≥n
        train_mse = mean_squared_error(y_train, y_pred_train)
        test_mse = mean_squared_error(y_test, y_pred_test)
        train_r2 = r2_score(y_train, y_pred_train)
        test_r2 = r2_score(y_test, y_pred_test)
        
        # Mostrar m√©tricas
        print(f"Error cuadr√°tico medio (Train): {train_mse:.4f}")
        print(f"Error cuadr√°tico medio (Test):  {test_mse:.4f}")
        print(f"R¬≤ Score (Train): {train_r2:.4f}")
        print(f"R¬≤ Score (Test):  {test_r2:.4f}")
        
        # Convertir predicciones continuas a clases (0 o 1)
        # Si predicci√≥n > 0.5 ‚Üí SPAM, si < 0.5 ‚Üí HAM
        y_pred_classes = (y_pred_test > 0.5).astype(int)
        accuracy = accuracy_score(y_test, y_pred_classes)
        print(f"Precisi√≥n de clasificaci√≥n: {accuracy:.4f}")
        
        # Mostrar palabras m√°s importantes
        self.show_important_words()
        
        return {
            'train_mse': train_mse,
            'test_mse': test_mse,
            'train_r2': train_r2,
            'test_r2': test_r2,
            'accuracy': accuracy
        }
    
    def show_important_words(self):
        """
        Muestra las palabras m√°s importantes para detectar spam.
        
        Analiza los coeficientes del modelo:
        - Coeficiente positivo: palabra indica SPAM
        - Coeficiente negativo: palabra indica HAM
        - Valor absoluto mayor: palabra m√°s importante
        """
        print(f"\nüîç PALABRAS M√ÅS IMPORTANTES")
        print("=" * 40)
        
        # Obtener coeficientes del modelo
        coefficients = self.model.coef_
        
        # Crear DataFrame con palabras y sus coeficientes
        word_importance = pd.DataFrame({
            'word': self.feature_names,
            'coefficient': coefficients
        })
        
        # Ordenar por importancia absoluta (valor absoluto del coeficiente)
        word_importance['abs_coefficient'] = abs(word_importance['coefficient'])
        word_importance = word_importance.sort_values('abs_coefficient', ascending=False)
        
        # Mostrar palabras que indican SPAM (coeficiente positivo)
        print("üìß PALABRAS QUE INDICAN SPAM (coeficiente positivo):")
        spam_words = word_importance[word_importance['coefficient'] > 0].head(10)
        for _, row in spam_words.iterrows():
            print(f"   {row['word']:20} ‚Üí +{row['coefficient']:.4f}")
        
        # Mostrar palabras que indican HAM (coeficiente negativo)
        print(f"\n‚úÖ PALABRAS QUE INDICAN HAM (coeficiente negativo):")
        ham_words = word_importance[word_importance['coefficient'] < 0].head(10)
        for _, row in ham_words.iterrows():
            print(f"   {row['word']:20} ‚Üí {row['coefficient']:.4f}")
    
    def predict_email(self, email_text):
        """
        Predice si un correo es spam o ham.
        
        Proceso:
        1. Preprocesar el texto del correo
        2. Convertir a caracter√≠sticas num√©ricas
        3. Hacer predicci√≥n con el modelo
        4. Convertir predicci√≥n continua a clase
        5. Calcular confianza
        
        Args:
            email_text (str): Texto del correo a clasificar
            
        Returns:
            dict: Diccionario con predicci√≥n, confianza, score y explicaci√≥n
        """
        # Preprocesar texto
        clean_text = self.preprocess_text(email_text)
        
        # Convertir a caracter√≠sticas num√©ricas
        features = self.vectorizer.transform([clean_text])
        
        # Hacer predicci√≥n (n√∫mero entre 0 y 1)
        prediction = self.model.predict(features)[0]
        
        # Convertir a clase: > 0.5 = SPAM, < 0.5 = HAM
        is_spam = prediction > 0.5
        
        # Calcular confianza (qu√© tan segura est√° la predicci√≥n)
        confidence = abs(prediction - 0.5) * 2  # Convertir a porcentaje
        
        return {
            'prediction': 'SPAM' if is_spam else 'HAM',
            'confidence': confidence,
            'raw_score': prediction,
            'explanation': self.explain_prediction(clean_text, prediction)
        }
    
    def explain_prediction(self, text, prediction):
        """
        Explica por qu√© el modelo hizo esa predicci√≥n.
        
        Analiza qu√© palabras del correo influyeron en la decisi√≥n:
        - Muestra las palabras presentes en el correo
        - Indica si cada palabra sugiere SPAM o HAM
        - Muestra el peso (coeficiente) de cada palabra
        
        Args:
            text (str): Texto limpio del correo
            prediction (float): Score de predicci√≥n del modelo
            
        Returns:
            str: Explicaci√≥n de la predicci√≥n
        """
        # Convertir texto a caracter√≠sticas
        features = self.vectorizer.transform([text])
        feature_array = features.toarray()[0]  # Convertir a array normal
        
        # Obtener coeficientes del modelo
        coefficients = self.model.coef_
        
        # Encontrar palabras presentes en el texto
        present_words = []
        for i, count in enumerate(feature_array):
            if count > 0:  # Si la palabra est√° presente
                word = self.feature_names[i]
                weight = coefficients[i]
                present_words.append({
                    'word': word,
                    'weight': weight,
                    'contribution': count * weight  # Contribuci√≥n total
                })
        
        # Ordenar por contribuci√≥n absoluta (m√°s importante primero)
        present_words.sort(key=lambda x: abs(x['contribution']), reverse=True)
        
        # Crear explicaci√≥n
        explanation = f"El modelo predijo {'SPAM' if prediction > 0.5 else 'HAM'} "
        explanation += f"con un score de {prediction:.3f}.\n\n"
        
        # Mostrar palabras que influyeron
        if prediction > 0.5:
            explanation += "üî¥ PALABRAS QUE INDICAN SPAM:\n"
        else:
            explanation += "üü¢ PALABRAS QUE INDICAN HAM:\n"
        
        # Mostrar top 5 palabras m√°s influyentes
        for word_info in present_words[:5]:
            if word_info['contribution'] > 0:
                explanation += f"   + {word_info['word']} (peso: +{word_info['weight']:.3f})\n"
            else:
                explanation += f"   - {word_info['word']} (peso: {word_info['weight']:.3f})\n"
        
        return explanation
    
    def save_model(self, filename='linear_spam_model.pkl'):
        """
        Guarda el modelo entrenado en un archivo.
        
        Guarda:
        - vectorizer: Para convertir texto a caracter√≠sticas
        - model: Modelo de regresi√≥n lineal entrenado
        - feature_names: Nombres de las caracter√≠sticas
        
        Args:
            filename (str): Nombre del archivo donde guardar
        """
        print(f"\nüíæ Guardando modelo en {filename}...")
        
        # Preparar datos para guardar
        model_data = {
            'vectorizer': self.vectorizer,
            'model': self.model,
            'feature_names': self.feature_names
        }
        
        # Guardar en archivo
        with open(filename, 'wb') as f:
            pickle.dump(model_data, f)
        
        print("‚úÖ Modelo guardado exitosamente!")

# =============================================================================
# FUNCIONES AUXILIARES
# =============================================================================

def create_sample_emails():
    """
    Crea correos de ejemplo para probar el modelo.
    
    Incluye:
    - Correos HAM (normales): trabajo, universidad, servicios
    - Correos SPAM (no deseados): bancos falsos, premios falsos
    
    Returns:
        list: Lista de diccionarios con correos de ejemplo
    """
    return [
        {
            'from': 'juan.perez@empresa.com',
            'subject': 'Reuni√≥n de trabajo - Viernes 15:00',
            'body': 'Hola equipo, les recuerdo que tenemos una reuni√≥n importante este viernes a las 15:00 en la sala de conferencias. Por favor traigan sus reportes actualizados. Saludos, Juan P√©rez - Gerente de Proyectos',
            'type': 'HAM'
        },
        {
            'from': 'info@banco-seguro.com',
            'subject': 'Verificaci√≥n de cuenta bancaria requerida',
            'body': 'Estimado cliente, hemos detectado actividad sospechosa en su cuenta. Para proteger sus fondos, debe verificar su identidad inmediatamente. Haga clic en el enlace para confirmar sus datos bancarios. Su cuenta ser√° bloqueada en 24 horas si no responde.',
            'type': 'SPAM'
        },
        {
            'from': 'maria.garcia@universidad.edu',
            'subject': 'Tarea de Machine Learning - Fecha l√≠mite',
            'body': 'Queridos estudiantes, les recuerdo que la tarea sobre regresi√≥n lineal debe entregarse el pr√≥ximo lunes antes de las 23:59. Por favor revisen las instrucciones en el campus virtual. Cualquier duda, no duden en escribirme. Saludos, Prof. Mar√≠a Garc√≠a',
            'type': 'HAM'
        },
        {
            'from': 'premios@loteria-millonaria.com',
            'subject': '¬°FELICIDADES! Ha ganado $1,000,000 USD',
            'body': '¬°INCRE√çBLE NOTICIA! Usted ha sido seleccionado como ganador de nuestro premio mayor de $1,000,000 USD. Para reclamar su premio, env√≠e inmediatamente sus datos personales y n√∫mero de cuenta bancaria. ¬°Esta oferta expira en 2 horas! Llame ahora al 1-800-PREMIOS.',
            'type': 'SPAM'
        },
        {
            'from': 'soporte@netflix.com',
            'subject': 'Confirmaci√≥n de pago - Netflix',
            'body': 'Hola, hemos procesado su pago mensual de Netflix por $12.99. Su suscripci√≥n est√° activa hasta el pr√≥ximo mes. Gracias por ser parte de Netflix. Si tiene alguna pregunta, visite nuestro centro de ayuda.',
            'type': 'HAM'
        }
    ]

def test_custom_emails(detector):
    """
    Permite al usuario probar correos personalizados.
    
    Funcionalidad:
    - Bucle infinito para ingresar correos
    - Validaci√≥n de longitud m√≠nima
    - Muestra predicci√≥n y explicaci√≥n
    - Opci√≥n de salir
    
    Args:
        detector: Instancia de SpamDetectorLinear entrenada
    """
    print(f"\n{'='*60}")
    print("üéØ INGRESA TUS PROPIOS CORREOS")
    print(f"{'='*60}")
    
    while True:
        print(f"\nüìù Ingresa el texto de un correo (o 'salir' para terminar):")
        print("   (Puedes copiar y pegar un correo real)")
        
        # Obtener entrada del usuario
        user_input = input("\n   Texto del correo: ").strip()
        
        # Verificar si quiere salir
        if user_input.lower() in ['salir', 'exit', 'quit', '']:
            break
        
        # Validar longitud m√≠nima
        if len(user_input) < 10:
            print("   ‚ùå El texto es muy corto. Ingresa un correo m√°s largo.")
            continue
        
        # Hacer predicci√≥n
        result = detector.predict_email(user_input)
        
        # Mostrar resultados
        print(f"\n   ü§ñ RESULTADO:")
        print(f"      Predicci√≥n: {result['prediction']}")
        print(f"      Confianza: {result['confidence']:.1%}")
        print(f"      Score: {result['raw_score']:.3f}")
        
        print(f"\n   üìù EXPLICACI√ìN:")
        print(f"      {result['explanation']}")
        
        print("-" * 80)

# =============================================================================
# FUNCI√ìN PRINCIPAL
# =============================================================================

def main():
    """
    Funci√≥n principal que ejecuta todo el pipeline de detecci√≥n de spam.
    
    Pasos:
    1. Inicializar detector
    2. Cargar y preparar datos
    3. Dividir en train/test
    4. Entrenar modelo
    5. Guardar modelo
    6. Probar con correos de ejemplo
    7. Permitir pruebas personalizadas
    8. Mostrar resumen final
    
    Returns:
        tuple: (detector, results) - detector entrenado y m√©tricas
    """
    print("üöÄ SISTEMA DE DETECCI√ìN DE SPAM CON REGRESI√ìN LINEAL")
    print("=" * 60)
    print("üìö Dise√±ado para principiantes de Machine Learning")
    print("=" * 60)
    
    # 1. Inicializar detector
    detector = SpamDetectorLinear()
    
    # 2. Cargar y preparar datos
    X, y = detector.load_and_prepare_data('spam_ham_dataset_labeled.csv')
    
    # 3. Dividir datos en train y test (80% train, 20% test)
    print(f"\nüìä Dividiendo datos en entrenamiento y prueba...")
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    print(f"   Datos de entrenamiento: {X_train.shape[0]} correos")
    print(f"   Datos de prueba: {X_test.shape[0]} correos")
    
    # 4. Entrenar modelo
    results = detector.train_model(X_train, X_test, y_train, y_test)
    
    # 5. Guardar modelo
    detector.save_model()
    
    # 6. Probar con correos de ejemplo
    print(f"\n{'='*60}")
    print("üß™ PROBANDO CON CORREOS DE EJEMPLO")
    print(f"{'='*60}")
    
    sample_emails = create_sample_emails()
    
    for i, email in enumerate(sample_emails, 1):
        print(f"\nüìß CORREO {i}:")
        print(f"   De: {email['from']}")
        print(f"   Asunto: {email['subject']}")
        print(f"   Cuerpo: {email['body'][:100]}...")
        print(f"   Tipo real: {email['type']}")
        
        # Hacer predicci√≥n
        result = detector.predict_email(email['body'])
        
        print(f"\n   ü§ñ PREDICCI√ìN DEL MODELO:")
        print(f"      Resultado: {result['prediction']}")
        print(f"      Confianza: {result['confidence']:.1%}")
        print(f"      Score: {result['raw_score']:.3f}")
        
        # Verificar si la predicci√≥n fue correcta
        correct = (result['prediction'] == email['type'])
        status = "‚úÖ CORRECTO" if correct else "‚ùå INCORRECTO"
        print(f"      {status}")
        
        print(f"\n   üìù EXPLICACI√ìN:")
        print(f"      {result['explanation']}")
        
        print("-" * 80)
    
    # 7. Permitir pruebas personalizadas
    test_custom_emails(detector)
    
    # 8. Resumen final
    print(f"\n{'='*60}")
    print("üìä RESUMEN FINAL")
    print(f"{'='*60}")
    print(f"‚úÖ Modelo entrenado exitosamente")
    print(f"üìà Precisi√≥n en datos de prueba: {results['accuracy']:.1%}")
    print(f"üìÅ Modelo guardado como 'linear_spam_model.pkl'")
    print(f"üéØ Listo para detectar spam en nuevos correos!")
    print(f"{'='*60}")
    
    return detector, results

# =============================================================================
# EJECUCI√ìN DEL PROGRAMA
# =============================================================================

if __name__ == "__main__":
    # Ejecutar el sistema completo
    detector, results = main()
